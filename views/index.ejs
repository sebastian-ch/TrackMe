<!DOCTYPE html>
<html lang='en'>

<head>
    <title>Where Is Sebastian!</title>
    <meta charset='utf-8'>
    <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />

    <link href="style/style.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.4.0/dist/leaflet.css" />

</head>

<body>
    <script src="https://unpkg.com/leaflet@1.4.0/dist/leaflet.js"></script>
    <script src="https://d3js.org/d3-dsv.v1.min.js"></script>
    <script src="https://d3js.org/d3-fetch.v1.min.js"></script>
    <script src="https://npmcdn.com/csv2geojson@latest/csv2geojson.js"></script>


    <div class='sidebar'>
        <div class='text-side'>
        <p>Where am I!</p>
        <p>This app shows where I am and puts it on a map.</p>

    </div>

    </div>
    <div id='map'></div>
    <script>
        var map = L.map('map', {
            center: [48.208, 16.371],
            zoom: 15
        });

        L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager_labels_under/{z}/{x}/{y}{r}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',
            subdomains: 'abcd',
            maxZoom: 19
        }).addTo(map);

        var group = L.layerGroup();
        getData();

        function getData() {

            d3.csv('data/file.csv').then(function (data) {
                csv2geojson.csv2geojson(data, {
                    latfield: 'Latitude',
                    lonfield: 'Longitude',
                    delimiter: ','
                }, function (err, data) {
                    if (err) {
                        console.log(err)
                    } else {
                        //console.log(data)
                        dontAddDupes(data)
                    }
                });
            })
        }

        function dontAddDupes(data) {

            function keyFor(item) {
                return item.geometry.coordinates[0] + ':' + item.geometry.coordinates[1];
            }

            var indexed = {};
            data.features.forEach(function (item) {
                // a duplicate key will replace the existing entry
                indexed[keyFor(item)] = item;
            });

            // turn the results back into an array of just values.
            var result = Object.keys(indexed).map(function (k) {
                return indexed[k];
            });

            //send the non duplicates
            addToMap(result)
            //console.log(result);


        }

        function addToMap(result) {

            map.removeLayer(group)

            L.geoJson(result, {
                pointToLayer: function (feature, ll) {
                    return L.circleMarker(ll, {
                        opacity: 0.5,
                        weight: 1,
                        fillOpacity: 0.5,
                        radius: 7
                    })
                }
            }).addTo(group)

            group.addTo(map)
        }
    </script>
</body>

</html>